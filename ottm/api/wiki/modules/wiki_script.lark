%ignore /#[^\n]*/     // Comment
%ignore /[ \t\n]+/

IDENT: /[a-zA-Z_]\w*/

CONST: "const"
VAR: "var"

IMPORT: "import"
EXPORT: "export"
FOR: "for"
WHILE: "while"
BREAK: "break"
CONTINUE: "continue"
FUNCTION: "function"
IF: "if"
TRY: "try"
RAISE: "raise"
DEL: "del"
RETURN: "return"

TRUE: "True"
FALSE: "False"
NONE: "None"

COLON: ":"
LBRAC: "["
LPAREN: "("
LCURL: "{"

NEG: "-"
INV: "~"
BNOT: "!"

POW: "**"
MUL: "*"
DIV: "/"
FDIV: "//"
MOD: "%"
ADD: "+"
SUB: "-"
IAND: "&"
IOR: "|"
XOR: "^"
LSHIFT: "<<"
RSHIFT: ">>"
IS: "is"
IN: "in"
NOT: "not"
EQ: "=="
NE: "!="
GT: ">"
GE: ">="
LT: "<"
LE: "<="
AND: "and"
OR: "or"

ASSIGN: "="
POWA: "**="
MULA: "*="
DIVA: "/="
FDIVA: "//="
MODA: "%="
ADDA: "+="
SUBA: "-="
ANDA: "&="
ORA: "|="
XORA: "^="
LSHIFTA: "<<="
RSHIFTA: ">>="

module: import_stmt* statement* [export_stmt]

// Statements

?import_stmt: IMPORT IDENT ["as" IDENT] ";" -> import_builtin_stmt
  | IMPORT string_lit "as" IDENT ";" -> import_wiki_module_stmt

?statement: decl_function_stmt
  | loop_stmt
  | if_stmt
  | try_stmt
  | (expr_stmt
    | decl_var_stmt
    | set_variable_stmt
    | set_property_stmt
    | set_item_stmt
    | raise_stmt
    | loop_flow_stmt
    | delete_item_stmt
    | return_stmt) ";"

export_stmt: EXPORT IDENT ("," IDENT)* ";"

// Function

decl_function_stmt: FUNCTION IDENT "(" [decl_function_params] ")" "is" statement* "end"

decl_function_params: IDENT ("," IDENT)* ["," remaining_values | ("," decl_function_default_arg)+]
  | remaining_values
  | decl_function_default_arg ("," decl_function_default_arg)*

decl_function_default_arg: IDENT "=" expr

// Loop

?loop_stmt: FOR unpack_values "in" expr "do" statement* "end" -> for_loop_stmt
  | WHILE expr "do" statement* "end" -> while_loop_stmt

loop_flow_stmt: BREAK -> break_stmt
  | CONTINUE -> continue_stmt

// If

if_stmt: IF if_stmt_if_part if_stmt_elif_part* [if_stmt_else_part] "end"
if_stmt_if_part: expr "then" statement*
if_stmt_elif_part: "elif" expr "then" statement*
if_stmt_else_part: "else" statement*

// Try-catch

try_stmt: TRY try_stmt_try_part try_stmt_except_part+ "end"
try_stmt_try_part: statement*
try_stmt_except_part: "except" IDENT ("|" IDENT)* [try_stmt_except_alias_part] "then" statement*
try_stmt_except_alias_part: "as" IDENT

// Variable declaration

decl_var_stmt: (CONST | VAR) set_multiple_vars_stmt

// Assign variable(s)

?set_variable_stmt: set_single_var_stmt | set_multiple_vars_stmt

set_single_var_stmt: IDENT _assign_op expr

set_multiple_vars_stmt: unpack_values "=" expr

// Assign property

set_property_stmt: _property_access _assign_op expr

// Assign item

set_item_stmt: _item_access _assign_op expr

// Raise error

raise_stmt: RAISE expr

// Delete item

delete_item_stmt: DEL _item_access

// Return

return_stmt: RETURN [expr]

// Expression

expr_stmt: expr

// Expressions

?arg_expr: expr
  | "*" value -> unpack_value

?expr: or
  | expr "if" expr "else" or -> ternary_op

?or: and
  | or OR and -> binary_op

?and: comp
  | and AND comp -> binary_op

?comp: shift
  | comp (IS [NOT] | [NOT] IN | EQ | NE | GT | GE | LT | LE) shift -> binary_op

?shift: ior
  | shift (LSHIFT | RSHIFT) ior -> binary_op

?ior: iand
  | ior (IOR | XOR) iand -> binary_op

?iand: add
  | iand IAND add -> binary_op

?add: mul
  | add (ADD | SUB) mul -> binary_op

?mul: pow
  | mul (MUL | DIV | FDIV | MOD) pow -> binary_op

?pow: unary
  | pow POW unary -> binary_op

?unary: value
  | (NEG | INV | BNOT) unary -> unary_op

?value: literal | get_variable | get_property | get_item | function_call | decl_anon_function | "(" expr ")"

get_variable: IDENT

get_property: _property_access

get_item: _item_access

function_call: value "(" [arg_expr ("," arg_expr)* [","]] ")"

decl_anon_function: FUNCTION "(" [decl_function_params] ")" "is" statement* "end"

?literal: multiline_string_lit
  | string_lit
  | float_lit
  | int_lit
  | bool_lit
  | list_lit
  | tuple_lit
  | dict_lit
  | set_lit
  | none_lit

// Ignore displayed errors with backslashes/unclosed character classes in PyCharm
string_lit: /(["'])(\\(?:[\\nt'"`]|u[\da-fA-F]{4}|U[\da-fA-F]{8})|[^\n\\])*?\1/
multiline_string_lit: /`(\\([\\nt'"`\n]|u[\da-fA-F]{4}|U[\da-fA-F]{8})|[^\\])*?`/

float_lit: /(\d(_?\d)*\.(\d(_?\d)*)?|\.\d(_?\d)*)([eE][+-]?\d(_?\d)*)?|\d(_?\d)*[eE][+-]?\d(_?\d)*/
int_lit: /0(x[\da-fA-F](_?[\da-fA-F])*|o[0-7](_?[0-7])*|b[01](_?[01])*)|\d(_?\d)*/

?bool_lit: TRUE -> boolean_true
  | FALSE -> boolean_false

none_lit: NONE

list_lit: LBRAC [arg_expr ("," arg_expr)* [","]] "]"

tuple_lit: LPAREN (arg_expr "," arg_expr ("," arg_expr)* [","] | arg_expr ",") ")"

set_lit: LCURL arg_expr ("," arg_expr)* [","] "}"

dict_lit: LCURL [dict_entry ("," dict_entry)* [","]] "}"
dict_entry: dict_key ":" expr
?dict_key: literal | get_variable | "(" expr ")"

// Common

?unpack_values: IDENT ("," IDENT)* ["," remaining_values]
  | remaining_values
remaining_values: "*" IDENT

?slice: expr ":" expr [":" [expr]] -> slice_both
  | COLON expr [":" [expr]] -> slice_end
  | expr ":" [":" [expr]] -> slice_start
  | COLON [":" [expr]] -> slice_none

_item_access: value "[" (expr | slice) "]"

_property_access: value "." IDENT

_assign_op: ASSIGN | POWA | MULA | DIVA | FDIVA | MODA | ADDA | SUBA | ANDA | ORA | XORA | LSHIFTA | RSHIFTA
