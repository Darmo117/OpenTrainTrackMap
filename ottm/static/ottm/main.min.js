"use strict";class Config{#mappings;constructor(){this.#mappings=window.OTTM_CONFIG;delete window.OTTM_CONFIG;$("#ottm-config-script").remove();}
get(key){return this.#mappings[key];}
containsKey(key){return this.get(key)!==undefined;}
keys(){return Object.keys(this.#mappings);}
values(){return Object.values(this.#mappings);}
entries(){return Object.entries(this.#mappings);}
[Symbol.iterator](){const keys=this.keys();let i=-1;return{next:()=>({value:keys[++i],done:!(i in keys)}),};}}
class OTTM{#config;constructor(){this.#config=new Config();this.#hookSettingsDropdownBehavior();this.#hookDarkModeCallback();this.#hookLanguageSelectorCallback();this.setReferer();this.setAccessKeys();}
get config(){return this.#config;}
convertDateTimezone(date,timezone){return new Date(date.toLocaleString("en-US",{timeZone:timezone}));}
formatTime(date){const hours=date.getHours().toLocaleString("en-US",{minimumIntegerDigits:2});const minutes=date.getMinutes().toLocaleString("en-US",{minimumIntegerDigits:2});return`${hours}:${minutes}`;}#hookSettingsDropdownBehavior(){const $button=$("#navbar-logged-out-settings");if($button.length){const $parent=$button.parent();const $menu=$parent.find(".dropdown-menu");$button.on("click",e=>{$parent.toggleClass("show");$menu.toggleClass("show");e.preventDefault();});$("body").on("click",e=>{if(!$.contains($parent[0],e.target)){$parent.removeClass("show");$menu.removeClass("show");}});}}#hookDarkModeCallback(){$("#dark-mode-checkbox").on("click",e=>{const checked=$(e.target).prop("checked");Cookies.set('dark_mode',checked);location.reload();});}#hookLanguageSelectorCallback(){$("#nav-language-select").on("change",e=>{const langCode=$(e.target).val();Cookies.set('language',langCode);location.reload();});}
setAccessKeys(){$("*[accesskey]").each((_,element)=>{const $element=$(element);const accessKey=$element.attr("accesskey");if(accessKey){const title=$element.attr("title");const shortcut=`[Alt+Shift+${accessKey}]`;$element.attr("title",(title?title+" ":"")+shortcut);}});}
setReferer(){const path=window.location.pathname+window.location.hash;const linkSelectors=["#nav-login-link","#nav-logout-link",];for(const linkSelector of linkSelectors){const $link=$(linkSelector);if($link.length){OTTM.setReturnTo($link,path);}}}
static setReturnTo($link,path,args){const url=new URL($link.prop("href"));url.search="return_to="+encodeURIComponent(path);if(args){url.search+="&"+$.map(Object.entries(args),e=>`${e[0]}=${e[1]}`).join("&");}
$link.attr("href",url.href);}}
window.ottm=new OTTM();