import*as L from"../libs/leaflet/leaflet-src.esm.js";import{Editable as LeafletEditable}from"../libs/leaflet/plugins/Leaflet.Editable.js";import"../libs/leaflet/plugins/leaflet.snap.js";import"../libs/split.min.js";import*as utils from"../utils.min.js";const setMapEditor=function(editor){this._mapEditor=editor;}
const setSelected=function(selected){const v=this.hasOwnProperty("_icon")?this._icon:this._path;const className="layer-selected";if(selected){L.DomUtil.addClass(v,className);}else{L.DomUtil.removeClass(v,className);}};const getVertexMarker=function(latlng){for(const marker of this._markers){if(marker.getLatLng().equals(latlng)){return marker;}}
return null;}
const Marker=L.Marker.extend({initialize:function(latlngs,options){L.Marker.prototype.initialize.call(this,latlngs,options);this._mapEditor=null;this.on("click",()=>this._mapEditor.updateSelection(this));this.on("contextmenu",()=>this._mapEditor.onContextMenu(this));},setMapEditor:setMapEditor,setSelected:setSelected,});const VertexMarker=LeafletEditable.VertexMarker.extend({initialize:function(latlng,latlngs,editor,options){LeafletEditable.VertexMarker.prototype.initialize.call(this,latlng,latlngs,editor,options);this._mapEditor=null;this._pinnedTo=new Set();this.on("click",()=>this._mapEditor.updateSelection(this));this.on("contextmenu",()=>this._mapEditor.onContextMenu(this));},setMapEditor:setMapEditor,setSelected:function(selected){if(!this._icon){return;}
setSelected.call(this,selected)},onDrag:function(e,propagate=true){LeafletEditable.VertexMarker.prototype.onDrag.call(this,e);if(propagate){this._pinnedTo.forEach(v=>{v._latlng=e.latlng;v.update();v.onDrag(utils.shallowCopy(e),false);});}},onDragStart:function(e,propagate=true){LeafletEditable.VertexMarker.prototype.onDragStart.call(this,e);if(propagate){this._pinnedTo.forEach(v=>{v.onDragStart(utils.shallowCopy(e),false);});}},onDragEnd:function(e,propagate=true){LeafletEditable.VertexMarker.prototype.onDragEnd.call(this,e);if(propagate){this._pinnedTo.forEach(v=>{v.onDragEnd(utils.shallowCopy(e),false);});}},pinTo:function(vertex){if(this._pinnedTo.has(vertex)||!vertex){return;}
this._pinnedTo.add(vertex);this._pinnedTo.forEach(v=>{if(v===vertex){return;}
v.pinTo(vertex);});vertex.pinTo(this);}});const Polyline=L.Polyline.extend({initialize:function(latlngs,options){options.weight=4;options.color="#fff";L.Polyline.prototype.initialize.call(this,latlngs,options);this._mapEditor=null;this._markers=[];this.on("click",()=>this._mapEditor.updateSelection(this));this.on("contextmenu",()=>this._mapEditor.onContextMenu(this));this.on("editable:vertex:new",e=>{const latLngs=this.getLatLngs();const vertexPos=e.vertex.getLatLng();for(let i=0,n=latLngs.length;i<n;i++){if(vertexPos.equals(latLngs[i])){this._markers.splice(i,0,e.vertex);}}
this._mapEditor.mergeVertices();});},setMapEditor:setMapEditor,setSelected:setSelected,getVertexMarker:getVertexMarker,});const Polygon=L.Polygon.extend({initialize:function(latlngs,options){options.weight=4;options.color="#fff";L.Polygon.prototype.initialize.call(this,latlngs,options);this._mapEditor=null;this._markers=[];this.on("click",()=>this._mapEditor.updateSelection(this));this.on("contextmenu",()=>this._mapEditor.onContextMenu(this));this.on("editable:vertex:new",e=>{const latLngs=this.getLatLngs()[0];const vertexPos=e.vertex.getLatLng();for(let i=0,n=latLngs.length;i<n;i++){if(vertexPos.equals(latLngs[i])){this._markers.splice(i,0,e.vertex);}}
this._mapEditor.mergeVertices();});},setMapEditor:setMapEditor,setSelected:setSelected,getVertexMarker:getVertexMarker,});class SnapData{feature;to;draggedVertex=null;latlng;constructor(feature,to,draggedVertex,latlng){this.feature=feature;this.to=to;this.draggedVertex=draggedVertex;this.latlng=latlng;}}
export class MapEditor{#map;#selectedFeature=null;#ignoreNextMapClick=false;#ignoreNextMapContextMenu=false;#drawing=null;#snapData=null;#editorPanel=new MapEditorPanel("editor-panel");constructor(){this.#injectMixins();}#injectMixins(){const thisEditor=this;const addVertexMarker=LeafletEditable.PathEditor.prototype.addVertexMarker;LeafletEditable.PathEditor.include({addVertexMarker:function(latlng,latlngs){const vertexMarker=addVertexMarker.call(this,latlng,latlngs);vertexMarker.setMapEditor(thisEditor);return vertexMarker;},});}
getMapEditOptions(){return{polylineClass:Polyline,polygonClass:Polygon,markerClass:Marker,vertexMarkerClass:VertexMarker,};}
initEditor(map){this.#map=map;const EditControl=L.Control.extend({options:{position:"topcenter",},onAdd:function(map){const container=L.DomUtil.create("div","leaflet-control leaflet-bar");const link=L.DomUtil.create("a","",container);link.href="#";link.title=ottm.translations.get(`map.controls.edit.${this.options.kind}.tooltip`);link.innerHTML=this.options.html;L.DomEvent.on(link,"click",L.DomEvent.stop).on(link,"click",()=>{window.LAYER=this.options.callback.call(map.editTools);},this);return container;},});const NewMarkerControl=EditControl.extend({options:{callback:(latlng,options)=>{const marker=map.editTools.startMarker(latlng,options);marker.setMapEditor(this);return marker;},kind:"new_marker",html:'<span class="mdi mdi-vector-point"></span>',}});const NewLineControl=EditControl.extend({options:{callback:(latlng,options)=>{const polyline=map.editTools.startPolyline(latlng,options);polyline.setMapEditor(this);return polyline;},kind:"new_line",html:'<span class="mdi mdi-vector-polyline"></span>',}});const NewPolygonControl=EditControl.extend({options:{callback:(latlng,options)=>{const polygon=map.editTools.startPolygon(latlng,options);polygon.setMapEditor(this);return polygon;},kind:"new_polygon",html:'<span class="mdi mdi-vector-polygon"></span>',}});map.addControl(new NewMarkerControl());map.addControl(new NewLineControl());map.addControl(new NewPolygonControl());const snapHandler=new L.Handler.MarkerSnap(map,null,{onlyVertices:true,});const snapMarker=L.marker(map.getCenter(),{icon:map.editTools.createVertexIcon({className:"leaflet-div-icon leaflet-drawing-icon"}),zIndexOffset:1000});snapHandler.watchMarker(snapMarker);const addSnapGuide=g=>{if(!(g instanceof Marker)){snapHandler.addGuideLayer(g);}};function removeSnapGuide(g){const i=snapHandler._guides.indexOf(g);if(i>=0){snapHandler._guides.splice(i,1);}}
function followMouse(e){snapMarker.setLatLng(e.latlng);}
map.on("click",()=>{if(this.#ignoreNextMapClick){this.#ignoreNextMapClick=false;return;}
this.updateSelection(null);});map.on("contextmenu",()=>{if(this.#ignoreNextMapContextMenu){this.#ignoreNextMapContextMenu=false;return;}
this.onContextMenu(null);});map.on("editable:created",e=>addSnapGuide(e.layer));map.on("editable:vertex:dragstart",e=>{const feature=e.layer;const vertex=e.vertex;removeSnapGuide(feature);snapHandler.watchMarker(vertex);vertex.on("snap",ev=>this.#onSnap(feature,vertex,ev.latlng,ev.layer));vertex.on("unsnap",()=>this.#onUnsnap());});map.on("editable:vertex:dragend",e=>{addSnapGuide(e.layer);snapHandler.unwatchMarker(e.vertex);e.vertex.off("snap");e.vertex.off("unsnap");L.DomUtil.removeClass(e.vertex._icon,"marker-snapped");if(this.#snapData?.draggedVertex){const ll=this.#snapData.draggedVertex._latlng;ll.lat=this.#snapData.latlng.lat;ll.lng=this.#snapData.latlng.lng;}
this.mergeVertices();});map.on("editable:drawing:start",e=>{removeSnapGuide(e.layer);if(!(e.layer instanceof Marker)){snapMarker.addTo(map);this.#drawing=e.layer;}
map.on("mousemove",followMouse);});map.on("editable:drawing:end",e=>{addSnapGuide(e.layer);map.off("mousemove",followMouse);snapMarker.remove();this.#drawing=null;});map.on("editable:drawing:click",e=>{const latlng=snapMarker.getLatLng();e.latlng.lat=latlng.lat;e.latlng.lng=latlng.lng;});map.on("editable:vertex:ctrlclick editable:vertex:metakeyclick",e=>{e.vertex.continue();});map.on("editable:vertex:rawclick",e=>{if(!(e.layer instanceof Marker)){e.cancel();}});snapMarker.on("snap",e=>this.#onSnap(this.#drawing,null,e.latlng,e.layer));snapMarker.on("unsnap",()=>this.#onUnsnap());$("#editor-panel").css({display:"block"}).addClass("split");$("#map").addClass("split");window.Split(["#editor-panel","#map"],{sizes:[20,80],minSize:[0,100],gutterSize:5,});this.updateSelection(null);}
updateSelection(feature){this.#ignoreNextMapClick=!this.#ignoreNextMapContextMenu&&(feature instanceof Polyline||feature instanceof Polygon);if(feature&&feature===this.#selectedFeature){return;}
this.#selectedFeature?.setSelected(false);this.#selectedFeature=feature;this.#selectedFeature?.setSelected(true);this.#editorPanel.setFeature(feature);}
onContextMenu(feature){this.#ignoreNextMapContextMenu=feature instanceof Polyline||feature instanceof Polygon;this.updateSelection(feature);console.log(feature);}
mergeVertices(){if(!this.#snapData){return;}
const sourceFeature=this.#snapData.feature;const targetFeature=this.#snapData.to;const snapPoint=this.#snapData.latlng;const sourceVertex=sourceFeature.getVertexMarker(snapPoint);const targetVertex=targetFeature.getVertexMarker(snapPoint);sourceVertex.pinTo(targetVertex);}#onSnap(feature,draggedVertex,latlng,to){this.#snapData=new SnapData(feature,to,draggedVertex,latlng,);}#onUnsnap(){this.#snapData=null;}}
class MapEditorPanel{#$title;#feature;constructor(divID){const $div=$(`#${divID}`);this.#$title=$('<h1 id="editor-panel-title"></h1>');$div.append(this.#$title);}
setFeature(feature){this.#feature=feature;if(feature){this.#$title.text(ottm.translations.get("map.editor_panel.title.edit_feature"));}else{this.#$title.text(ottm.translations.get("map.editor_panel.title.select_feature"));}}}