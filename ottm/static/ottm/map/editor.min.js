class SnapData{feature;to;draggedVertex=null;latlng;constructor(feature,to,draggedVertex,latlng){this.feature=feature;this.to=to;this.draggedVertex=draggedVertex;this.latlng=latlng;}}
class MapEditor{#map;#selectedFeature=null;#layerClicked=false;#isFeatureMenuVisible=false;#drawing=null;#snapData=null;#editorPanel=new MapEditorPanel("editor-panel");Marker;VertexMarker;Polyline;Polygon;constructor(){const thisEditor=this;const setSelected=function(selected){const v=this.hasOwnProperty("_icon")?this._icon:this._path;if(selected){L.DomUtil.addClass(v,"layer-selected");}else{L.DomUtil.removeClass(v,"layer-selected");}};const getVertexMarker=function(latlng){for(const marker of this._markers){if(marker.getLatLng().equals(latlng)){return marker;}}
return null;}
this.Marker=L.Marker.extend({initialize:function(latlngs,options){L.Marker.prototype.initialize.call(this,latlngs,options);this.on("click",()=>{thisEditor.#updateSelection(this);});this.on("contextmenu",()=>{thisEditor.#onContextMenu(this);});},setSelected:setSelected,});this.VertexMarker=L.Editable.VertexMarker.extend({initialize:function(latlng,latlngs,editor,options){L.Editable.VertexMarker.prototype.initialize.call(this,latlng,latlngs,editor,options);this._pinnedTo=new Set();this.on("click",()=>{thisEditor.#updateSelection(this);});this.on("contextmenu",()=>{thisEditor.#onContextMenu(this);});},setSelected:function(selected){if(!this._icon){return;}
setSelected.call(this,selected)},onDrag:function(e,propagate=true){console.log(this,propagate);L.Editable.VertexMarker.prototype.onDrag.call(this,e);if(propagate){this._pinnedTo.forEach(v=>{v.onDrag(e,false);});}},pinTo:function(vertex){if(this._pinnedTo.has(vertex)){return;}
this._pinnedTo.add(vertex);this._pinnedTo.forEach(v=>{if(v===vertex){return;}
v.pinTo(vertex);});vertex.pinTo(this);console.log(this._pinnedTo.size,this.editor.feature._path);}});this.Polyline=L.Polyline.extend({initialize:function(latlngs,options){options.weight=4;options.color="#fff";L.Polyline.prototype.initialize.call(this,latlngs,options);this._markers=[];this.on("click",function(){thisEditor.#layerClicked=true;thisEditor.#updateSelection(this);});this.on("contextmenu",()=>{thisEditor.#isFeatureMenuVisible=true;thisEditor.#onContextMenu(this);});this.on("editable:vertex:new",e=>{const latLngs=this.getLatLngs();const vertexPos=e.vertex.getLatLng();for(let i=0,n=latLngs.length;i<n;i++){if(vertexPos.equals(latLngs[i])){this._markers.splice(i,0,e.vertex);}}
thisEditor.#mergeSnap();});},setSelected:setSelected,getVertexMarker:getVertexMarker,});this.Polygon=L.Polygon.extend({initialize:function(latlngs,options){options.weight=4;options.color="#fff";L.Polygon.prototype.initialize.call(this,latlngs,options);this._markers=[];this.on("click",function(){thisEditor.#layerClicked=true;thisEditor.#updateSelection(this);});this.on("contextmenu",()=>{thisEditor.#isFeatureMenuVisible=true;thisEditor.#onContextMenu(this);});this.on("editable:vertex:new",e=>{const latLngs=this.getLatLngs()[0];const vertexPos=e.vertex.getLatLng();for(let i=0,n=latLngs.length;i<n;i++){if(vertexPos.equals(latLngs[i])){this._markers.splice(i,0,e.vertex);}}
thisEditor.#mergeSnap();});},setSelected:setSelected,getVertexMarker:getVertexMarker,});}#updateSelection(feature){this.#selectedFeature?.setSelected(false);this.#selectedFeature=feature;this.#selectedFeature?.setSelected(true);this.#editorPanel.setFeature(feature);}
getMapEditOptions(){return{polylineClass:this.Polyline,polygonClass:this.Polygon,markerClass:this.Marker,vertexMarkerClass:this.VertexMarker,};}
initEditor(map){this.#map=map;const EditControl=L.Control.extend({options:{position:"topcenter",},onAdd:function(map){const container=L.DomUtil.create("div","leaflet-control leaflet-bar");const link=L.DomUtil.create("a","",container);link.href="#";link.title=ottm.translations.get(`map.controls.edit.${this.options.kind}.tooltip`);link.innerHTML=this.options.html;L.DomEvent.on(link,"click",L.DomEvent.stop).on(link,"click",()=>{window.LAYER=this.options.callback.call(map.editTools);},this);return container;},});const NewMarkerControl=EditControl.extend({options:{callback:map.editTools.startMarker,kind:"new_marker",html:'<span class="mdi mdi-vector-point"></span>',}});const NewLineControl=EditControl.extend({options:{callback:map.editTools.startPolyline,kind:"new_line",html:'<span class="mdi mdi-vector-polyline"></span>',}});const NewPolygonControl=EditControl.extend({options:{callback:map.editTools.startPolygon,kind:"new_polygon",html:'<span class="mdi mdi-vector-polygon"></span>',}});map.addControl(new NewMarkerControl());map.addControl(new NewLineControl());map.addControl(new NewPolygonControl());const snapHandler=new L.Handler.MarkerSnap(map,null,{onlyVertices:true,});const snapMarker=L.marker(map.getCenter(),{icon:map.editTools.createVertexIcon({className:"leaflet-div-icon leaflet-drawing-icon"}),zIndexOffset:1000});snapHandler.watchMarker(snapMarker);const addSnapGuide=g=>{if(!(g instanceof this.Marker)){snapHandler.addGuideLayer(g);}};function removeSnapGuide(g){const i=snapHandler._guides.indexOf(g);if(i>=0){snapHandler._guides.splice(i,1);}}
function followMouse(e){snapMarker.setLatLng(e.latlng);}
map.on("click",()=>{if(this.#layerClicked){this.#layerClicked=false;return;}
this.#updateSelection(null);});map.on("contextmenu",()=>{if(this.#isFeatureMenuVisible){this.#isFeatureMenuVisible=false;return;}
this.#onContextMenu(null);});map.on("editable:created",e=>addSnapGuide(e.layer));map.on("editable:vertex:dragstart",e=>{console.log(e.type);const feature=e.layer;const vertex=e.vertex;removeSnapGuide(feature);snapHandler.watchMarker(vertex);vertex.on("snap",ev=>{console.log(ev.type);this.#onSnap(feature,vertex,ev.latlng,ev.layer);});vertex.on("unsnap",_=>this.#onUnsnap());});map.on("editable:vertex:dragend",e=>{console.log(e.type);addSnapGuide(e.layer);snapHandler.unwatchMarker(e.vertex);e.vertex.off("snap");e.vertex.off("unsnap");L.DomUtil.removeClass(e.vertex._icon,"marker-snapped");if(this.#snapData?.draggedVertex){console.log(this.#snapData);this.#snapData.draggedVertex._latlng.lat=this.#snapData.latlng.lat;this.#snapData.draggedVertex._latlng.lng=this.#snapData.latlng.lng;}
this.#mergeSnap();});map.on("editable:drawing:start",e=>{removeSnapGuide(e.layer);if(!(e.layer instanceof this.Marker)){snapMarker.addTo(map);this.#drawing=e.layer;}
map.on("mousemove",followMouse);});map.on("editable:drawing:end",e=>{addSnapGuide(e.layer);map.off("mousemove",followMouse);snapMarker.remove();this.#drawing=null;});map.on("editable:drawing:click",e=>{const latlng=snapMarker.getLatLng();e.latlng.lat=latlng.lat;e.latlng.lng=latlng.lng;});map.on("editable:vertex:ctrlclick editable:vertex:metakeyclick",e=>{e.vertex.continue();});map.on("editable:vertex:rawclick",e=>{if(!(e.layer instanceof this.Marker)){e.cancel();}});snapMarker.on("snap",e=>this.#onSnap(this.#drawing,null,e.latlng,e.layer));snapMarker.on("unsnap",()=>this.#onUnsnap());$("#editor-panel").css({display:"block"}).addClass("split");$("#map").addClass("split");window.Split(["#editor-panel","#map"],{sizes:[20,80],minSize:[0,100],gutterSize:5,});this.#updateSelection(null);}#onSnap(feature,draggedVertex,latlng,to){this.#snapData=new SnapData(feature,to,draggedVertex,latlng,);}#onUnsnap(){this.#snapData=null;}#mergeSnap(){if(!this.#snapData){return;}
const sourceFeature=this.#snapData.feature;const targetFeature=this.#snapData.to;const snapPoint=this.#snapData.latlng;const sourceVertex=sourceFeature.getVertexMarker(snapPoint);const targetVertex=targetFeature.getVertexMarker(snapPoint);console.log(sourceFeature,targetFeature,snapPoint);sourceVertex.pinTo(targetVertex);}#onContextMenu(feature){this.#updateSelection(feature);console.log(feature);}}
class MapEditorPanel{#$title;#feature;constructor(divID){const $div=$(`#${divID}`);this.#$title=$('<h1 id="editor-panel-title"></h1>');$div.append(this.#$title);}
setFeature(feature){this.#feature=feature;if(feature){this.#$title.text(ottm.translations.get("map.editor_panel.title.edit_feature"));}else{this.#$title.text(ottm.translations.get("map.editor_panel.title.select_feature"));}}}