"use strict";

(function () {
  class Config {
    /** @type {Object<string, *>} */
    #mappings;

    /**
     * Internal data is queried from the global `WIKI_CONFIG` object generated by the server.
     * The object and associated `<script>` tag are deleted once this object is initialized.
     */
    constructor() {
      this.#mappings = window.WIKI_CONFIG;
      delete window.WIKI_CONFIG;
      $("#wiki-config-script").remove();
    }

    /**
     * Return the value for the given key.
     * @param key {string} The key.
     * @return {*} The corresponding value or undefined if the key is absent.
     */
    get(key) {
      return this.#mappings[key];
    }

    /**
     * Check whether this object contains the given key.
     * @param key {string} The key to check.
     * @return {boolean} True if the key is present, false otherwise.
     */
    containsKey(key) {
      return this.get(key) !== undefined;
    }

    /**
     * @return {string[]} An array of all keys of this object.
     */
    keys() {
      return Object.keys(this.#mappings);
    }

    /**
     *
     * @return {*[]} An array of all values of this object.
     */
    values() {
      return Object.values(this.#mappings);
    }

    /**
     * @return {[string, *][]} An array of all key-value entries of this object.
     */
    entries() {
      return Object.entries(this.#mappings);
    }

    /**
     * @return {{next: (function(): {value: string, done: boolean})}} An iterator over the key of this object.
     */
    [Symbol.iterator]() {
      const keys = this.keys();
      let i = -1;
      return {
        next: () => ({value: keys[++i], done: !(i in keys)}),
      };
    }
  }

  window.WIKI_CONFIG = {a: 1, b: 2}; // TEST
  window.wiki = {
    Config: Config,
    config: new Config(),
  };

  // Apply HLJS on all tagged elements
  $(".hljs").each((_, element) => hljs.highlightElement(element));
})();
